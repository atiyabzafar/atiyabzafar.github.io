~~~

<div id="deg_directednetwork" ,hidden = true></div>
<div id="AverageInDegree",hidden=true></div>
<div id = "max_node_3", hidden = true></div>
<style>
body {
    padding: 20px;    
}
#deg_directednetwork {
  width: 100%;
  height: 400px;
  border: 1px solid lightgray;
}

</style>

<script>
/*

var nodes3, edges3, network3;

function draw2() {
  nodes3 = new vis.DataSet();
  nodes3.add([
    { id: "1", label: "1" ,title:"1"},
    { id: "2", label: "2" ,title: "2" },
    { id: "3", label: "3" ,title: "3" },
    { id: "4", label: "4" ,title: "4" },
    { id: "5", label: "5" ,title: "5" },
  ]);
  edges3 = new vis.DataSet();
  edges3.add([
    {'arrows':'to', id: "1-2", from: "1", to: "2" },
    {'arrows':'to', id: "1-3", from: "1", to: "3" },
    {'arrows':'to', id: "2-4", from: "2", to: "4" },
    {'arrows':'to', id: "2-5", from: "2", to: "5" },
  ]);
  var container = document.getElementById("deg_directednetwork");
  var data = {
    nodes: nodes3,
    edges: edges3,
  };

  var options = {
    interaction:{
        dragNodes:true,
        dragView: true,
        hideEdgesOnDrag: false,
        hideEdgesOnZoom: false,
        hideNodesOnDrag: false,
        hover: false,
        hoverConnectedEdges: true,
        keyboard: {
          enabled: false,
          speed: {x: 10, y: 10, zoom: 0.02},
          bindToWindow: true,
          autoFocus: true,
        },
        multiselect: true,
        navigationButtons: false,
        selectable: true,
        selectConnectedEdges: true,
        tooltipDelay: 300,
        zoomSpeed: 1,
        zoomView: true
      },
      manipulation: {
        addNode: false,
        addEdge: function(edgeData,callback) {
          if (edgeData.from === edgeData.to) {
            var r = confirm("Do you want to connect the node to itself?");
            if (r === true) {
              callback(edgeData);
            }
          }
          else {
            callback(edgeData);
          }
        change_lable_1();
        }
      }
  };
  var max_node = document.getElementById("max_node_3");
  max_node.innerText = 5;
  network3 = new vis.Network(container, data, options);
  function change_lable_1(){
    var max_node = document.getElementById("max_node_3");
    let max_id = parseInt(max_node.innerText);
    deg=[]
    ds=0
    cols=['#82EDFD','#62C5DA','#0492C2','#2732C2','#1620A6','#060D6A','#03073E','#010426','#000000']
    for (let nid=1;nid<=max_id;nid++){
      deg.push(network2.getConnectedEdges(nid).length)
      console.log(nid,getEdgesOfNode(nid))
      console.log(edges3.get())
      ds=ds+deg[nid-1]
      nodes3.update({id:String(nid),label:String(deg[nid-1]),
      color:{
        background:cols[deg[nid-1]]
      },
      font:{
        color:'#ffffff',
        strokeWidth: 1,
        strokeColor:'#000000'
      }
      });
    }
  var avindeg=document.getElementById("AverageInDegree")
  avindeg.innerText='Average Degree = '+ds/max_id
  console.log(ds,max_id)
  }
  function getEdgesOfNode(nodeId) {
    return edges3.get().filter(function (edge) {
      /*return edge.from === nodeId || edge.to === nodeId;*/
      return edge.from == nodeId
    });
  }
  change_lable_1();
  network2.on('click',function(params){
    if((params.nodes.length == 0) && (params.edges.length == 0)) {
        var max_node = document.getElementById("max_node_3");
        let new_id = parseInt(max_node.innerText)+1;
        var updatedIds = nodes.add([{
            id :  String(new_id),
            label: String(new_id),
            title: String(new_id),
            x:params.pointer.canvas.x,
            y:params.pointer.canvas.y
        }]);
        max_node.innerText = new_id;
        change_lable_1();
    }
  });
  
}

window.addEventListener("load", () => {
  draw2();

});
*/
</script>

~~~
